'use strict';
const mongoose = require('mongoose');
const Types = mongoose.Schema.Types;
const tree = require('mongoose-path-tree');
const mongoosePaginate = require('mongoose-paginate');
const _ = require('underscore');
const App = require('./app');
const Channel = require('./channel');

const PushSchema = new mongoose.Schema({
    payload: { // what this Push contains
        data: {
            sys: {
                type: {
                    type: String,
                    enum: ['text', 'event'],
                    required: true
                },
                value: {
                    type: String,
                    required: true
                }
            },
            user: {
                required: false
            }
        }
    },
    channelId: { // where was this Push pushed?
        type: Types.ObjectId,
        ref: 'Channel',
        required: true,
        index: true
    },
    appId: { // where was this Push pushed?
        type: Types.ObjectId,
        ref: 'App',
        required: true,
        select: false,
        index: true
    },
    userId: { // who posted this Push?
        type: Types.ObjectId,
        ref: 'User',
        required: true
    },
}, {
        timestamps: true //This will automatically add createdAt and updatedAt fields to your schema.
});

PushSchema.index({ createdAt: 1}); // schema level


PushSchema.methods.getParent = function(cb) {
    this.getAncestors((err, anscestors) => {
        if (anscestors && anscestors.length > 0){
            let parent = anscestors.pop();
            cb(parent);
        } else {
            cb();
        }
    });
};

PushSchema.methods.getChannel = function(cb) {
    Channel.findOne({
        _id: this.channelId
    }, (err, channel)=> {
        cb && cb(channel);
    });
};

PushSchema.methods.getApp = function(cb) {
    this.getChannel((channel) => {
        if (channel){
            App.findOne({
                _id: channel.appId
            }, (err, app)=>{
                cb && cb(app);
            });
        } else {
            cb();
        }
    });
};

PushSchema.pre('save', function(next) {
    //console.log(this.payload.data.sys);
    this.wasNew = this.isNew;
    next();
});

PushSchema.post('save', function (push, next) {
    if (this.wasNew) {
        this.getApp((app)=>{
            if (app){
                // ~~FOUND APP! UPDATE LIMIT HERE~~
                app.updateLimiters(next);
            }
        })
    }
});

PushSchema.plugin(tree, {
    pathSeparator : '#',              // Default path separator
    onDelete :      'DELETE',       // Can be set to 'DELETE' or 'REPARENT'. Default: 'REPARENT'
    numWorkers:     5,                // Number of stream workers
    idType:         mongoose.Schema.ObjectId  // Type used for _id. Can be, for example, String generated by shortid module
});

PushSchema.plugin(mongoosePaginate);

module.exports = mongoose.model('Push', PushSchema);